import scipy.stats as stat
import scipy.optimize as opt
import numpy as np
import lmfit

def var_ci(var, n, ci):
    df = n - 1
    tail_prob = (1.-ci)/2.
    chi2_left = stat.chi2.ppf(q=tail_prob, df=df)
    chi2_right = stat.chi2.ppf(q=1-tail_prob, df=df)
    lb = df * var / chi2_right
    ub = df * var / chi2_left
    return lb, ub

def sd_ci(sd, n, ci):
    vlb, vub = var_ci(var=sd**2, n=n, ci=ci)
    return np.sqrt(vlb), np.sqrt(vub)

def sd_exp_negllh(params, x, sd_meas, n_meas):
    # Evaluate the exponential function at the n values
    #sd_proposal = alpha*np.exp(beta*(1.0/n_meas))
    sd_proposal = params[0]*np.exp(params[1]*x)
    
    # Assuming a chi-squared PDF, the prob. of seeing the actual data pont, sd,
    # is just the value of the chi-sq distr generated by sd_proposal and the n
    # here
    df = n_meas -1
    llh = np.sum(
        stat.chi2.logpdf(x=((sd_meas/sd_proposal)**2)*df, df=df)
    )
    return -llh

def exp_negllh(params, x, sd_meas, n_meas):
    # Evaluate the exponential function at the n values
    #sd_proposal = alpha*np.exp(beta*(1.0/n_meas))
    sd_proposal = params[0]*np.exp(params[1]*x)
    
    # Assuming a NORMAL PDF, the prob. of seeing the actual data pont, sd,
    # is just the value of the normal distr generated by sd_proposal and the n
    # here
    df = n_meas -1
    llh = np.sum(
        stat.chi2.logpdf(x=((sd_meas/sd_proposal)**2)*df, df=df)
    )
    return -llh

def sd_pwr_negllh(params, x, sd_meas, n_meas):
    # Evaluate the exponential function at the n values
    #sd_proposal = alpha*np.exp(beta*(1.0/n_meas))
    x = np.log10(x)
    sd_proposal = params[0]*x**(params[1])
    
    # Assuming a chi-squared PDF, the prob. of seeing the actual data pont, sd,
    # is just the value of the chi-sq distr generated by sd_proposal and the n
    # here
    df = n_meas -1
    llh = np.sum(
        stat.chi2.logpdf(x=((sd_meas/sd_proposal)**2)*df, df=df)
    )
    return -llh

def lmfit_sd_exp_negllh(params, x, sd_meas, n_meas):
    return sd_exp_negllh(alpha=params['alpha'].value, beta=params['beta'].value, x=x, sd_meas=sd_meas, n_meas=n_meas)

def sd_maxllh_fit(sd_meas, n_meas, alpha0=1, beta0=-1):
    #out = opt.minimize(sd_exp_negllh, x0=[alpha0, beta0], args=(1/n_meas, sd_meas, n_meas), method='CG')
    #out = opt.minimize(sd_pwr_negllh, x0=[alpha0, beta0], args=(1/n_meas, sd_meas, n_meas), method='CG')
    out = opt.minimize(exp_negllh, x0=[alpha0, beta0], args=(1/n_meas, sd_meas, n_meas), method='CG')
    print out
    return out

def lmfit_sd_maxllh_fit(sd_meas, n_meas):
    params = lmfit.Parameters()
    params.add('alpha', value=1, min=0.0)
    params.add('beta', value=-1, max=0.0)
    out = lmfit.minimize(lmfit_sd_exp_negllh, params, args=(1/n_meas, sd_meas, n_meas))
    print out
    return out
